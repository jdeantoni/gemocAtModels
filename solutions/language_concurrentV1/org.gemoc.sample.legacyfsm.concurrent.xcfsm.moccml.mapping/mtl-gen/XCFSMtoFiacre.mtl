[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.eclipse.org/xtend', 
	'http://www.eclipse.org/xtend/RichString', 
	'http://www.eclipse.org/xtext/xbase/Xbase',
	) ]
[template public generate(aFSMSystem : FSMSystem)]
[comment @main/]
[file (aFSMSystem.name+'_FiacreProcess.fcr', false, 'UTF-8')]
// *********************** Type Declaration ******************************/
const NUMBER_StateMachines : int is [aFSMSystem.eAllContents(StateMachine)->size()/]
const NUMBER_States : int is [aFSMSystem.eAllContents(State)->size()/]
const NUMBER_Transitions : int is [aFSMSystem.eAllContents(Transition)->size()/]
const NUMBER_FSMSystems : int is [aFSMSystem.eAllContents(FSMSystem)->size()/]
const NUMBER_Buffers : int is [aFSMSystem.eAllContents(Buffer)->size()/]



/*********************************************************************
Defining the Functions for : FSMSystem
**********************************************************************/
/*********************************************************************
Defining the Functions for : StateMachine
**********************************************************************/
/*********************************************************************
Defining the Functions for : Buffer
**********************************************************************/
/************************* FSMSystem Process Instances***************************/
[for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
process p[element.name/] ['['/][element.name/]_initializeIt:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:FSMSystem
    from s0  [element.name/]_initializeIt; global:=FSMSystem_initialize( global , global.refToElement_id) ;  to s0
[/for]
/************************* StateMachine Process Instances***************************/
[for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
process p[element.name/] ['['/][element.name/]_runIt:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:StateMachine
    from s0  [element.name/]_runIt; global:=StateMachine_run( global , global.refToElement_id) ;  to s0
[/for]
process pUnConstrainedSemantics['['/][for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
[element.name/]_initializeIt:out none,[/for][for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
[element.name/]_runIt:out none,[/for][for (element : Buffer| aFSMSystem.eAllContents(Buffer))]
[/for][']'/] is
	states s0
[for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
    from s0  [element.name/]_initializeIt;  to s0

[/for]
[for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
    from s0  [element.name/]_runIt;  to s0

[/for]
[for (element : Buffer| aFSMSystem.eAllContents(Buffer))]

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
[element.name/]_initializeIt:out none,[/for][for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
[element.name/]_runIt:out none,[/for][for (element : Buffer| aFSMSystem.eAllContents(Buffer))]
[/for][']'/] is
	
	states s0
[for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
    from s0  [element.name/]_initializeIt;  to s0

[/for]
[for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
    from s0  [element.name/]_runIt;  to s0

[/for]
[for (element : Buffer| aFSMSystem.eAllContents(Buffer))]

[/for]
[/file]
/******************** Process Parallelization for FSMSystem******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
[element.name/]_initializeIt: none,

[/for][for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
[element.name/]_runIt: none,
[/for][for (element : Buffer| aFSMSystem.eAllContents(Buffer))]

[/for]

par

pUnConstrainedSemantics['['/][for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
[element.name/]_initializeIt,[/for][for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
[element.name/]_runIt,[/for][for (element : Buffer| aFSMSystem.eAllContents(Buffer))]
,[/for][']'/]
[for (element : FSMSystem| aFSMSystem.eAllContents(FSMSystem))]
|| p[element.name/] ['['/][element.name/]_initializeIt[']'/] (&global, ID)
[/for]
[for (element : StateMachine| aFSMSystem.eAllContents(StateMachine))]
|| p[element.name/] ['['/][element.name/]_runIt[']'/] (&global, ID)
[/for]
[for (element : Buffer| aFSMSystem.eAllContents(Buffer))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
end par
sys 
[/file]
[/template]
